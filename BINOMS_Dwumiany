/*

Dla liczb całkowitych n i k, 0 <= k <= n <= 1000, wyznacz liczbę różnych k-elementowych podzbiorów zbioru n-elementowego. 
Liczby n i k będą dobrane tak, aby wynik nie przekroczył 1 000 000 000.

Input
T [ liczba testów, T <= 10000 ]
n_1 k_1
n_2 k_2
...
n_T k_T

Output
wynik_1
wynik_2
...
wynik_T
*/

import java.util.Scanner;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.math.BigInteger;

class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
		BufferedReader read = new BufferedReader(new InputStreamReader(System.in));
		int num = Integer.parseInt(read.readLine());
		int temp;
		String[] line;
		BigInteger res;

		while(num-->0){
			line = read.readLine().split(" ");
			temp = Integer.parseInt(line[0])- Integer.parseInt(line[1]);
			res = s(line[0]).divide((s(line[1]).multiply(s(Integer.toString(temp)))));
			System.out.println("" + res);
			
		}
		
	}
	
	public static BigInteger s(String x){
		BigInteger resoult = BigInteger.ONE;
		BigInteger n = new BigInteger(x);
		while(n.compareTo(BigInteger.ONE) > 0){
				resoult = resoult.multiply(n);
				n = n.subtract(BigInteger.ONE);
			}
		return resoult;
	}
}
